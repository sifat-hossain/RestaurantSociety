// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Spread.Connect.Infrastructure.Persistance.Admin;

#nullable disable

namespace Spread.Connect.Infrastructure.Persistance.Admin.Migrations
{
    [DbContext(typeof(AdminDbContext))]
    [Migration("20230603111128_DefaultRole")]
    partial class DefaultRole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Spread.Connect.Domain.Admin.Entities.ApplicationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ParamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ParamName = "DefaultRole",
                            Scope = "Default user role",
                            Value = "User"
                        });
                });

            modelBuilder.Entity("Spread.Connect.Domain.Admin.Entities.PaymentHistory", b =>
                {
                    b.Property<Guid>("PaymentHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("PaymentHistoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("bit");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserMobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentHistoryId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("PaymentHistory", (string)null);
                });

            modelBuilder.Entity("Spread.Connect.Domain.Admin.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("Inactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("fc67814d-11c7-486a-90d0-0c79c18de656"),
                            Inactive = false,
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            RoleId = new Guid("fc67814d-11c7-486a-90d0-0c79c18de655"),
                            Inactive = false,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("0da3649e-e5ec-4c5b-a9c0-ec3b19f86e0c"),
                            Inactive = false,
                            Name = "User"
                        },
                        new
                        {
                            RoleId = new Guid("0de3eb68-12aa-4f09-99d7-58ef9ca090c2"),
                            Inactive = false,
                            Name = "Finance"
                        });
                });

            modelBuilder.Entity("Spread.Connect.Domain.Admin.Entities.SpreadUser", b =>
                {
                    b.Property<Guid>("SpreadUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("AlternatePhone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("College")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPasswordReset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSuspended")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("LoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PresentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresPasswordReset")
                        .HasColumnType("bit");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SuspendedUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("University")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SpreadUserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NID")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("SpreadUser", (string)null);
                });

            modelBuilder.Entity("Spread.Connect.Domain.Admin.Entities.SpreadUserRole", b =>
                {
                    b.Property<Guid>("SpreadUserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpreadUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SpreadUserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SpreadUserId");

                    b.ToTable("SpreadUserRole");
                });

            modelBuilder.Entity("Spread.Connect.Domain.Admin.Entities.UnregisterBrotherhoodUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsRegistered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("UnregisterBrotherhoodUser", (string)null);
                });

            modelBuilder.Entity("Spread.Connect.Domain.Admin.Entities.SpreadUserRole", b =>
                {
                    b.HasOne("Spread.Connect.Domain.Admin.Entities.Role", "Role")
                        .WithMany("SpreadUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spread.Connect.Domain.Admin.Entities.SpreadUser", "SpreadUser")
                        .WithMany("SpreadUserRoles")
                        .HasForeignKey("SpreadUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("SpreadUser");
                });

            modelBuilder.Entity("Spread.Connect.Domain.Admin.Entities.Role", b =>
                {
                    b.Navigation("SpreadUserRoles");
                });

            modelBuilder.Entity("Spread.Connect.Domain.Admin.Entities.SpreadUser", b =>
                {
                    b.Navigation("SpreadUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
